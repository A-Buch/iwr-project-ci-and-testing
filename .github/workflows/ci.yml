name: Build and Testing

on:
  # We run CI on pushes to the develop branch
  push:
    branches:
    - develop
    - main
  # and on all pull requests to the main branch
  pull_request:
    branches:
    - main

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: chartboost/ruff-action@v1
  build_and_test:
    #name: Build and test  # each job needs a name - mandatory
    strategy:
      #fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version:
            - 3.10.11
            - 3.12.0
    runs-on: ${{ matrix.os }}
    name: Testing on "${{matrix.os}}", Python "${{matrix.python-version}}" # each job needs a name - mandatory

    steps:
    # - uses: actions/checkout@v3
    - name: Checkout repository
      #shell: python
      # uses: actions/checkout@v3  ## PROBLM: Error: Unable to resolve action actions/setup-checkout, repository not found
      uses: actions/setup-python@v5 # org: actions/setup-checkout@v3  ## PROBLM: Error: Unable to resolve action actions/setup-checkout, repository not found
      with:
        # setuptools_scm requires a non-shallow clone of the repository
        fetch-depth: 0

    # use this only for windows run
    - name: greetings f powershell
      if: runner.os == 'Windows' # only if its runner.os and in 'xx'
      shell: pwsh
      run: Write-Host "Hi"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python packages
      run: |
        pip install pytest
        echo installed pytest and test files


  coverage:  # TODO get definiton of coverage for CI, jobs -> coverage
    name: Coverage Testing
    runs-on: ubuntu-latest #windows-2019 

    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python packages with poetry, set up development env from pyproject.toml and poetry.lock
      run: |
        pip install poetry
        poetry install
        echo installing poetry
#         poetry run pytest -v tests.py

    - name: Run Python tests [pytest]
      # working-directory: ./tests
      run: |    # pytest flags:-v increase verbosity, -m : run only marked test (marked with @pytest.mark.marked_test)
        poetry run python -m unittest ./tests/tests.py
        echo checking for test errors via tests.py
